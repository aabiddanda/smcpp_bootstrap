#!python3
# The main entry point of your workflow.

import os
import subprocess
import glob
import pandas as pd
from snakemake.utils import validate
from pathlib import Path
import yaml
import warnings
import datetime

DATESTAMP = datetime.datetime.now().strftime("%Y%m%d")

# configure shell behavior for all rules
shell.executable("/bin/bash")
shell.prefix("set -euo pipefail;")

# record commit-ish ID
label = subprocess.check_output(["git", "describe", "--always"]).strip()
print(f"smcpp-analysis workflow {label}")

# create log dir
Path("logs/").mkdir(parents=True, exist_ok=True)

# Setup and validate a configfile
configfile: "config/config.yaml"
# validate(config, schema="../schemas/dataset.schema.yaml")

# Create the full manifest from all populations
manifest_acc = []
for p in config["datasets"]:
    cur_manifest = pd.read_csv(config["datasets"][p]["manifest"])
    cur_manifest['population'] = p
    manifests.append(cur_manifest)
manifest = pd.concat(manifest_acc)

TARGETS = []
if config["single_pop_demography"]["enabled"]:
    for p in config["single_pop_demography"]["populations"]:
        t1 = config["datasets"][p]['t1']
        knots = config["datasets"][p]['knots']
        TARGETS.append(f"data/smcpp_output_mult_final/{p}_t1_{t1}_knots_{knots}_filt/{p}_t1_{t1}_knots_{knots}_filt.csv")

localrules:
    all,

rule all:
    input:
        TARGETS


# ---- Including Other Snakefiles ---- #
include : "snakefiles/main_analysis.snake"
# include : "snakefiles/validation.snake"
# include : "snakefiles/sanity.snake"
# include : "snakefiles/supp_analysis.snake"
# include : "snakefiles/boots_main.snake"
# include : "snakefiles/boots_supp.snake"
